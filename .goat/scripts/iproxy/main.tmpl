{{- $ctx := . -}}

{{- $secrets := $ctx.Properties.Secrets.Tree -}}
{{- $data := $ctx.Data.Tree -}}

{{- $externalSSHUsername := $secrets.infrastructure.external.master.username }}
{{- $externalSSHHost := $secrets.infrastructure.external.master.host }}
{{- $externalSSHPort := $secrets.infrastructure.external.master.port }}
{{- $externalDataPath := $secrets.infrastructure.external.data.path }}

{{- $internalSSHUsername := $secrets.infrastructure.internal.master.username }}
{{- $internalSSHHost := $secrets.infrastructure.internal.master.host }}
{{- $internalSSHPort := $secrets.infrastructure.internal.master.port }}
{{- $internalDataPath := $secrets.infrastructure.internal.data.path }}

{{- $frpPort := $secrets.infrastructure.proxy.frp.port }}
{{- $frpSecret := $secrets.infrastructure.proxy.frp.secret }}


pip:run --name=install --description=<<DESC
Install proxy
DESC --sandbox=sshb:{{$externalSSHUsername}}@{{$externalSSHHost}}:{{$externalSSHPort}} --body=<<EOF
apt-get -y update
apt-get install -y nginx apache2-utils

# prepare config
cat > /etc/nginx/conf.d/default.conf << EndOfConfig
# Nginx Proxy config
proxy_set_header Host \$host;
proxy_set_header X-Real-IP \$remote_addr;
proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto \$scheme;
proxy_set_header X-Forwarded-Host \$server_name;

{{- range $index, $app := $data.appowncloud.__NODES }}
{{- template "valid/exposedApp" (dict "name" $index "row" $app  ) }}

upstream appowncloud-{{$index}} {
  server localhost:{{$app.port}};
}
server {
  listen 443 ssl;
  server_name {{$app.host}} www.{{$app.host}};
  ssl_certificate      /etc/letsencrypt/live/{{$app.host}}/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/{{$app.host}}/privkey.pem;
  ssl_session_cache  builtin:1000  shared:SSL:10m;
  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
  ssl_prefer_server_ciphers on;
  location / {
    proxy_pass          http://appowncloud-{{$index}};
    proxy_read_timeout  90;
    proxy_ssl_verify    off;
    proxy_redirect      off;
  }
}
server {
  listen 80;
  server_name {{$app.host}} www.{{$app.host}};
  return 301 https://\$host\$request_uri;
}
{{- end}}


{{- range $index, $app := $data.appregistry.__NODES }}
{{- template "valid/exposedApp" (dict "name" $index "row" $app  ) }}
{{- $appDataPath := (print $externalDataPath "/app/registry/" $index "/" ) }}

upstream appregistry-{{$index}} {
  server localhost:{{$app.port}};
}
server {
  listen 443 ssl;
  server_name {{$app.host}} www.{{$app.host}};
  ssl_certificate      /etc/letsencrypt/live/{{$app.host}}/fullchain.pem;
  ssl_certificate_key  /etc/letsencrypt/live/{{$app.host}}/privkey.pem;
  ssl_session_cache  builtin:1000  shared:SSL:10m;
  ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
  ssl_prefer_server_ciphers on;
  location / {
    proxy_pass          https://appregistry-{{$index}};
    proxy_read_timeout  90;
    proxy_ssl_verify    off;
    proxy_redirect      off;
  }
  location /v2/ {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
    if (\$http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
      return 404;
    }

    # To add basic authentication to v2 use auth_basic setting.
    auth_basic "Registry realm";
    auth_basic_user_file {{$appDataPath}}auth/htpasswd;

    proxy_pass                          https://appregistry-{{$index}};
    proxy_set_header  Host              \$http_host;   # required for docker client's sake
    proxy_set_header  X-Real-IP         \$remote_addr; # pass on real client's IP
    proxy_set_header  X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto \$scheme;
    proxy_set_header  Authorization     \$http_authorization;
    proxy_pass_header Authorization;
    proxy_read_timeout                  900;
  }
}
server {
  listen 80;
  server_name {{$app.host}} www.{{$app.host}};
  return 301 https://\$host\$request_uri;
}
{{- end}}

EndOfConfig

systemctl restart nginx

EOF
